{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "#from xlsxwriter.utility import xl_rowcol_to_cell\n",
    "#from xlrd import open_workbook\n",
    "#import csv\n",
    "\n",
    "df=pd.read_csv('cust.csv')\n",
    "out=df.style.highlight_null()\n",
    "\n",
    "\n",
    "#this is the function to be passed into applymap\n",
    "def highlight_cell(val, date=39860,color1='purple',color2='blue'):\n",
    "    if val==date:\n",
    "        return 'background-color: %s' % color1\n",
    "    elif val =='Active':\n",
    "        return 'background-color:%s'%color2\n",
    "    elif val=='Inactive':\n",
    "        return 'background-color:%s'%color2\n",
    "    else:\n",
    "        return ''\n",
    "\n",
    "\n",
    "out1=out.applymap(highlight_cell,\n",
    "                  subset=['Update_Date','Status','Updated_by'])\n",
    "#type(out1)\n",
    "#dir(out1)\n",
    "#out1.render()\n",
    "\n",
    "#out1\n",
    "\n",
    "#find and replace\n",
    "out=df.replace(['Active','Inactive'],['A','I'])\n",
    "#df.str.replace('', '', case=False)\n",
    "\n",
    "#REGEX\n",
    "\n",
    "match1=df.Updated_by[df.Updated_by.str.contains(\n",
    "    '[A-Z]{1}[_]{1}[A-Z]{1}[a-z]*')].index.tolist()\n",
    "type(match)\n",
    "match2=df.Updated_by[df.Updated_by.str.contains('SYSTEM')].index.tolist()\n",
    "#idx=df[df['Updated_by'].str.contains('SYSTEM')].index.tolist()\n",
    "match2\n",
    "match1\n",
    "match=match1+match2\n",
    "len(match)\n",
    "#len(df.Updated_by)\n",
    "\n",
    "testlist=[]\n",
    "for i in range(131):\n",
    "    testlist.append(i)\n",
    "\n",
    "#testlist\n",
    "notmatch=list(set(testlist) - set(match))\n",
    "print notmatch\n",
    "notmatch.sort()\n",
    "\n",
    "#test if the regex is true\n",
    "df.Updated_by[df.Updated_by.str.contains('[A-Z]{1}[.]{1}[A-Z]{1}[a-z]*')]\n",
    "\n",
    "dff=pd.DataFrame({'a':[12,3,4,4],'b':[2,3,4,5],'c':['a','b','ab','abc']})\n",
    "dff\n",
    "dff.loc[[0,2,],['a','c']]\n",
    "dff.c[dff.c == 'a'].index.tolist()\n",
    "#def highlight(val, date=39860,color1='purple',color2='blue'):\n",
    " #   if val=='[a]*':\n",
    "#      return 'background-color: %s' % color1\n",
    "#dff.applymap(highlight)\n",
    "#dff.a[dff.a==4].index.tolist()\n",
    "dff\n",
    "dff.c[dff.c.str.contains('abc')]#.index.tolist()\n",
    "\n",
    "#def some_fn():\n",
    " #   if dff.index.vlues ==1:\n",
    "#      return 'applymap_' + x\n",
    "    #elif x:\n",
    "     #   return 100 * x\n",
    "#    else:\n",
    " #       return\n",
    "\n",
    "#dff.applymap(some_fn)\n",
    "\n",
    "dff.ix[[0]]\n",
    "ix=dff.index.values\n",
    "\n",
    "\n",
    "#below give a another column which is logical\n",
    "df1['Flag'] = df1.applymap(f).all(axis=1).astype(bool)\n",
    "\n",
    "\n",
    "\n",
    "df1=pd.DataFrame({'a':[1,2,3,4],'b':['a','b','c','d']})\n",
    "df1\n",
    "print type(df1)\n",
    "df1.to_csv('df1.csv')"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
